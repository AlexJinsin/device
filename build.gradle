buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.7.RELEASE")
    }
}

subprojects {
    version '0.9.3-SNAPSHOT'
    apply plugin: 'java'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    repositories {
        mavenCentral()
    }
    dependencies {

        compile 'org.slf4j:slf4j-api:1.7.12'
        compile 'org.slf4j:slf4j-ext:1.7.12'
        compile 'ch.qos.logback:logback-classic:1.1.3'
        compile 'commons-io:commons-io:2.4'
        compile 'org.apache.commons:commons-lang3:3.4'
        testCompile("junit:junit:4.12")
    }
    compileJava {

        options.encoding = 'utf-8'
        //enable incremental compilation
    }
    javadoc {
        options {
            locale = 'en_US'
            encoding = 'UTF-8'
        }
    }
}

project(':device-api') {

    ext {
        ddmlibVersion = '24.5.0'
    }
    dependencies {
        compile 'org.apache.commons:commons-exec:1.2'
        compile 'commons-cli:commons-cli:1.2'
        compile "com.android.tools.ddms:ddmlib:$ddmlibVersion"
        compile "com.android.tools:dvlib:$ddmlibVersion"
        compile "com.android.tools:sdklib:$ddmlibVersion"
        compile "com.android.tools:sdk-common:$ddmlibVersion"

    }

    apply plugin: 'maven'

    group = "com.github.cosysoft"
    archivesBaseName = "device-api"

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
    }

    if(rootProject.hasProperty('ossrhUsername')){
        apply from: "$rootProject.projectDir/gradle/upload.gradle"
    }



}

project(':device-node') {

/*    sourceSets {
        main {
            resources {
                srcDir 'src/main/resources'
                include '*.properties'

                srcDir '../device-keeper'
                include 'app**'
     }
     }
     }*/

    task copyKeeper(type: Copy) {
        from('../device-keeper/app')
        into(new File(sourceSets.main.output.resourcesDir, 'app'))
    }
    processResources.dependsOn copyKeeper

    apply plugin: 'spring-boot'

    bootRun {
        addResources = false
    }
    dependencies {
        compile project(':device-api')
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-actuator")
        compile("org.springframework.boot:spring-boot-starter-remote-shell")
        testCompile("org.springframework.boot:spring-boot-starter-test")
    }
}
